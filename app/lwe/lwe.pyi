from typing import Self

class Public:
    def __init__(self: Self) -> None: ...
    @classmethod
    def from_bytes(cls: type[Self], byte_str: bytes) -> Self: ...
    def to_bytes(self: Self) -> bytes: ...
    def encrypt(self: Self, message: str) -> str: ...

class Secret:
    def __init__(self: Self) -> None: ...
    @classmethod
    def from_bytes(cls: type[Self], byte_str: bytes) -> Self: ...
    def to_bytes(self: Self) -> bytes: ...
    def generate_public_key(self: Self) -> Public: ...
    def decrypt(self: Self, message: str) -> str: ...
